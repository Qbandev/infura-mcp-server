name: Release

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
          - prerelease
      prerelease_tag:
        description: 'Prerelease tag (for prerelease only)'
        required: false
        default: 'beta'
        type: string

# Grant GITHUB_TOKEN only the minimal permissions required for releases
permissions:
  contents: write  # Required for creating releases and pushing tags
  packages: write  # Required for publishing packages

jobs:
  # Security check - only allow repository owner to run releases
  authorize:
    runs-on: ubuntu-latest
    outputs:
      authorized: ${{ steps.auth-check.outputs.authorized }}
    steps:
      - name: Check authorization
        id: auth-check
        run: |
          # Only allow repository owner or specified collaborators
          AUTHORIZED_USERS="Qbandev"  # Add more users separated by spaces if needed
          REPO_OWNER="${{ github.repository_owner }}"
          ACTOR="${{ github.actor }}"

          echo "Repository owner: $REPO_OWNER"
          echo "Workflow actor: $ACTOR"
          echo "Authorized users: $AUTHORIZED_USERS"

          # Check if actor is repository owner
          if [ "$ACTOR" = "$REPO_OWNER" ]; then
            echo "✅ Authorized: Repository owner"
            echo "authorized=true" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Check if actor is in authorized users list
          for user in $AUTHORIZED_USERS; do
            if [ "$ACTOR" = "$user" ]; then
              echo "✅ Authorized: Listed in authorized users"
              echo "authorized=true" >> $GITHUB_OUTPUT
              exit 0
            fi
          done

          # Not authorized
          echo "❌ Unauthorized: $ACTOR is not authorized to run releases"
          echo "Only the repository owner ($REPO_OWNER) or authorized users can trigger releases"
          echo "authorized=false" >> $GITHUB_OUTPUT
          exit 1

  release:
    runs-on: ubuntu-latest
    needs: authorize
    if: needs.authorize.outputs.authorized == 'true'


    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
          # This ensures the workflow can push back to the repo
          persist-credentials: true

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: npm ci

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          # Configure git to use the token for authentication
          git config --local url."https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/".insteadOf "https://github.com/"

      - name: Run comprehensive tests before release
        env:
          INFURA_API_KEY: ${{ secrets.INFURA_API_KEY }}
        run: |
          echo "🧪 Running comprehensive test suite before release..."
          
          # Run basic validation tests
          echo "📋 Running validation tests..."
          npm test
          
          # Run comprehensive tool testing (all 29 tools)
          echo "🔧 Running comprehensive tool validation (29 tools)..."
          if [ -n "$INFURA_API_KEY" ]; then
            echo "🔑 Using real API key for comprehensive testing..."
            npm run test:comprehensive
          else
            echo "⚠️ No API key available, running structure validation only..."
            npm run test:comprehensive
          fi
          
          # Run SSE functionality tests  
          echo "🌐 Running SSE functionality tests..."
          npm run test:sse
          
          # Run integration tests if API key is available
          if [ -n "$INFURA_API_KEY" ]; then
            echo "🔗 Running integration tests with real API..."
            npm run test:integration
            echo "✅ All tests including real API validation passed - ready for release!"
          else
            echo "⚠️ Release proceeding without API validation (no secret configured)"
          fi

      - name: Verify package works
        run: |
          echo "Verifying package functionality..."
          timeout 10s npm run list-tools || true
          echo "Package verification completed"

      - name: Bump version
        id: version-bump
        run: |
          if [ "${{ github.event.inputs.version_type }}" = "prerelease" ]; then
            NEW_VERSION=$(npm version prerelease --preid=${{ github.event.inputs.prerelease_tag }} --no-git-tag-version)
          else
            NEW_VERSION=$(npm version ${{ github.event.inputs.version_type }} --no-git-tag-version)
          fi

          echo "new-version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "New version: $NEW_VERSION"

      - name: Update CHANGELOG (if exists)
        run: |
          if [ -f "CHANGELOG.md" ]; then
            echo "Updating CHANGELOG.md..."
            # Add placeholder entry for the new version
            sed -i "1i\\## ${{ steps.version-bump.outputs.new-version }} - $(date +%Y-%m-%d)\\n\\n### Added\\n- New features go here\\n\\n### Changed\\n- Changes go here\\n\\n### Fixed\\n- Bug fixes go here\\n\\n" CHANGELOG.md
          else
            echo "Creating CHANGELOG.md..."
            cat > CHANGELOG.md << EOF
          # Changelog

          All notable changes to this project will be documented in this file.

          The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
          and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).

          ## ${{ steps.version-bump.outputs.new-version }} - $(date +%Y-%m-%d)

          ### Added
          - Initial release
          - Infura MCP Server with 29 read-only Ethereum JSON-RPC tools
          - Support for multiple networks (Mainnet, Optimism, Arbitrum, Polygon, Base, Sepolia)
          - SSE and stdio transport modes
          - Docker support
          - Enhanced error handling and logging
          EOF
          fi

      - name: Commit version bump
        run: |
          git add package.json package-lock.json CHANGELOG.md
          git commit -m "chore: bump version to ${{ steps.version-bump.outputs.new-version }}"

      - name: Create and push tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Creating tag ${{ steps.version-bump.outputs.new-version }}..."
          git tag ${{ steps.version-bump.outputs.new-version }}

          echo "Pushing commits to main..."
          git push origin main

          echo "Pushing tag ${{ steps.version-bump.outputs.new-version }}..."
          git push origin ${{ steps.version-bump.outputs.new-version }}

          echo "✅ Successfully created and pushed tag!"

      - name: Generate release notes
        id: release-notes
        run: |
          # Get commits since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          if [ -n "$LAST_TAG" ]; then
            COMMITS=$(git log ${LAST_TAG}..HEAD --oneline --no-merges)
          else
            COMMITS=$(git log --oneline --no-merges)
          fi

          # Create release notes
          cat > release-notes.md << EOF
          ## What's Changed

          $COMMITS

          ## Installation

          \`\`\`bash
          npm install -g infura-mcp-server
          # or
          npx infura-mcp-server
          \`\`\`

          ## Usage

          Set your Infura API key and connect to Claude Desktop or Cursor:

          \`\`\`json
          {
            "mcpServers": {
              "Infura MCP Server": {
                "command": "npx",
                "args": ["infura-mcp-server"],
                "env": {
                  "INFURA_API_KEY": "your_infura_api_key_here"
                }
              }
            }
          }
          \`\`\`

          ## Features

          - 29 read-only Ethereum JSON-RPC tools
          - Multi-network support (Mainnet, Optimism, Arbitrum, Polygon, Base, Sepolia)
          - SSE and stdio transport modes
          - Enhanced error handling and logging
          - Docker support
          EOF

      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Create release using GitHub CLI
          if [ "${{ github.event.inputs.version_type }}" = "prerelease" ]; then
            gh release create ${{ steps.version-bump.outputs.new-version }} \
              --title "Release ${{ steps.version-bump.outputs.new-version }}" \
              --notes-file release-notes.md \
              --prerelease
          else
            gh release create ${{ steps.version-bump.outputs.new-version }} \
              --title "Release ${{ steps.version-bump.outputs.new-version }}" \
              --notes-file release-notes.md
          fi

      - name: Publish to NPM
        if: success()
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          echo "Publishing to NPM..."
          if [ "${{ github.event.inputs.version_type }}" = "prerelease" ]; then
            npm publish --tag beta
          else
            npm publish
          fi
          echo "✅ Successfully published to NPM!"

      - name: Release Summary
        if: always()
        run: |
          echo "🎉 Release workflow completed!"
          echo "Version: ${{ steps.version-bump.outputs.new-version }}"
          echo "Type: ${{ github.event.inputs.version_type }}"
          if [ "${{ github.event.inputs.version_type }}" = "prerelease" ]; then
            echo "Prerelease tag: ${{ github.event.inputs.prerelease_tag }}"
          fi
          echo "Repository: ${{ github.repository }}"
          echo "Triggered by: ${{ github.actor }}"
          echo "Authorization: ✅ Verified repository owner"
          echo "NPM Package: https://www.npmjs.com/package/infura-mcp-server"
          echo "GitHub Release: ${{ github.server_url }}/${{ github.repository }}/releases/tag/${{ steps.version-bump.outputs.new-version }}"